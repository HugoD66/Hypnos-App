security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        chain_provider:
            chain:
                providers: [ app_user_provider, app_manager_provider ]

        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        app_manager_provider:
            entity:
                class: App\Entity\Manager
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: chain_provider
            form_login:
                login_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                target: app_home
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_MANAGER: ROLE_USER
        ROLE_ADMIN: ROLE_MANAGER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/booking, roles: ROLE_USER }
        - { path: ^/user, roles: ROLE_USER }
        - { path: ^/add-picture-list, roles: ROLE_MANAGER}
        - { path: ^/success-change-password, roles: ROLE_MANAGER}
        - { path: ^/manager, roles: ROLE_MANAGER}
        - { path: ^/manager, roles: ROLE_MANAGER}
        - { path: ^/remove, roles: ROLE_MANAGER}
        - { path: ^/add-suite, roles: ROLE_ADMIN}
        - { path: ^/admin, roles: ROLE_ADMIN}
        - { path: ^/add-manager, roles: ROLE_ADMIN}
        - { path: ^/add-hotel, roles: ROLE_ADMIN}



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase back times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
